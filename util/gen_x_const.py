#!/usr/bin/env python3

import re
import os.path
from ctypes import CDLL, c_wchar


DEFINE = re.compile(r'\#define\s(?:XF86)?(?P<name>XK\_\w+)'
	+ r'\s+(?P<sym>0x[0-9a-fA-F]+)')
GROUP = re.compile(r'\#ifdef\s+XK_(?P<name>\w+)')
TTYFUNC = {'XK_BackSpace', 'XK_Tab', 'XK_Linefeed', 'XK_Clear', 'XK_Return',
	'XK_Pause', 'XK_Scroll_Lock', 'XK_Sys_Req', 'XK_Escape', 'XK_Delete'}


HEAD = """
# This file is auto-generated by macpy/util/gen_x_const.py. DO NOT EDIT.


"""
XKMAIN = """
__all__ = [
{}]


from . import *


def _imp():

	dic = globals()
	groups = tuple(name for name in dic if not name.startswith('__'))
	for member in groups:
		for name in dir(dic[member]):
			if name.startswith('XK_') or name.startswith('XF86XK_'):
				dic[name] = getattr(dic[member], name)


_imp()

"""
MLNMAP = """
MOD = {
	XK.XK_Shift_L: 'SHIFT',
	XK.XK_Shift_R: 'SHIFT',
	XK.XK_ISO_Level3_Shift: 'ALTGR',
	XK.XK_Control_L: 'CTRL',
	XK.XK_Control_R: 'CTRL',
	XK.XK_Alt_L: 'ALT',
	XK.XK_Alt_R: 'ALT',
	XK.XK_Super_L: 'META',
	XK.XK_Super_R: 'META',
	XK.XK_Meta_L: 'META',
	XK.XK_Meta_R: 'META',
	XK.XK_Hyper_L: 'META',
	XK.XK_Hyper_R: 'META'}


LOCK = {
	XK.XK_Num_Lock: 'NUMLOCK',
	XK.XK_Caps_Lock: 'CAPSLOCK',
	XK.XK_Scroll_Lock: 'SCROLLLOCK'}


NAME = {
	'SHIFT': XK.XK_Shift_L,
	'ALTGR': XK.XK_ISO_Level3_Shift,
	'CTRL': XK.XK_Control_L,
	'ALT': XK.XK_Alt_L,
	'META': XK.XK_Super_L,
	'NUMLOCK': XK.XK_Num_Lock,
	'CAPSLOCK': XK.XK_Caps_Lock,
	'SCROLLLOCK': XK.XK_Scroll_Lock}
"""


keysymdef = '/usr/include/X11/keysymdef.h'
xf86keysym = '/usr/include/X11/XF86keysym.h'
XK = '../macpy/constant/XK'
xmap = '../macpy/constant/xmap.py'


KeySymToUcs = CDLL('libX11.so').KeySymToUcs4
KeySymToUcs.restype = c_wchar


groups = {}
PRINT = []
KP = []
NOIDX = []
current_group = None


with open(keysymdef) as fd:
	for line in fd:
		grpmatch = GROUP.match(line)
		if grpmatch:
			group = grpmatch.group('name')
			current_group = group
			if group not in groups:
				groups[group] = []
		elif 'deprecated' not in line:
			defmatch = DEFINE.match(line)
			if defmatch:
				name = defmatch.group('name')
				sym = defmatch.group('sym')
				if current_group:
					groups[current_group].append(
						'{0} = {1}\n'.format(name, sym))
				elif name == 'XK_VoidSymbol':
					groups['MISCELLANY'] = []
					groups['MISCELLANY'].append(
						'{0} = {1}\n'.format(name, sym))
				char = KeySymToUcs(int(sym, 16))
				if char == '\x00':
					char = None
					if '_KP_' in name or name in TTYFUNC:
						char = chr(int(sym, 16) & 0x7f)
						if '_KP_' in name:
							KP.append('\tXK.{},\n'.format(name))
				if char:
					if char == '\\':
						char = '\\\\'
					elif char == "'":
						char = "\\'"
					elif char == '\n':
						char = '\\n'
					elif char == '\r':
						char = '\\r'
					if char.isprintable() or char.isspace():
						PRINT.append(
							"\tXK.{0}: '{1}',\n".format(name, char))
					else:
						char = None
				if not char:
					if '_dead_' not in name:
						NOIDX.append('\tXK.{},\n'.format(name))


groups['XF86'] = []
with open(xf86keysym) as fd:
	for line in fd:
		defmatch = DEFINE.match(line)
		if defmatch:
			name = defmatch.group('name')
			sym = defmatch.group('sym')
			groups['XF86'].append(
				'{0} = {1}\n'.format(name, sym))
			NOIDX.append('\tXK.{},\n'.format(name))


group_list = ["\t'{}',\n".format(group) for group in groups]
groups['__init__'] = [XKMAIN.format(''.join(group_list))]
for filename, content in groups.items():
	with open(os.path.join(XK, filename + '.py'), 'w') as fd:
		fd.write(''.join([HEAD] + content))


with open(xmap, 'w') as fd:
	fd.write(HEAD)
	fd.write('from . import XK\n\n\n')
	fd.write('PRINT = {\n')
	fd.write(''.join(PRINT))
	fd.write('}\n\n\n')
	fd.write('KEYPAD = {\n')
	fd.write(''.join(KP))
	fd.write('}\n\n\n')
	fd.write('NOIDX = {\n')
	fd.write(''.join(NOIDX))
	fd.write('}\n\n')
	fd.write(MLNMAP)
